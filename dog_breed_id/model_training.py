# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_training.ipynb.

# %% auto 0
__all__ = ['DEFAULT_RANDOM_SEED', 'seed_basic', 'seed_torch', 'seed_everything', 'get_subsets']

# %% ../nbs/05_training.ipynb 3
from .data_preprocessing import read_csv_with_array_columns
from .research import get_classes_from_frame
from .benchmark import *
from miniai.learner import *
from miniai.init import *
from miniai.activations import *
from miniai.sgd import *
from miniai.datasets import show_images

import cv2
import fastcore.all as fc
from pathlib import Path
from PIL import Image
import pandas as pd
import numpy as np
import glob
import os
from matplotlib import pyplot as plt

import shutil
import torch
import torchvision
from torch import nn
from torch.utils.data import Dataset, DataLoader
from torchvision.transforms import functional as F
from torcheval.metrics import MulticlassAccuracy
from torch.optim import lr_scheduler
from sklearn.model_selection import train_test_split
import timm

# %% ../nbs/05_training.ipynb 5
import os 
import random
import numpy as np 

DEFAULT_RANDOM_SEED = 2021

def seed_basic(seed=DEFAULT_RANDOM_SEED):
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    np.random.seed(seed)
    
# torch random seed
import torch
def seed_torch(seed=DEFAULT_RANDOM_SEED):
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False
      
# basic + tensorflow + torch 
def seed_everything(seed=DEFAULT_RANDOM_SEED):
    seed_basic(seed)
    seed_torch(seed)

# %% ../nbs/05_training.ipynb 10
def get_subsets(df, valid_size=0.1, random_state=DEFAULT_RANDOM_SEED):
    train_subset, valid_subset = train_test_split(df, test_size=valid_size, stratify=df['category'], random_state=random_state)
    valid_subset, test_subset = train_test_split(valid_subset, train_size=0.5, test_size=0.5, random_state=random_state)
    return train_subset, valid_subset, test_subset
