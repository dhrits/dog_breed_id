# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_data_preprocessing.ipynb.

# %% auto 0
__all__ = ['annotated_image', 'get_breedname', 'resize_bboxes', 'save_resized', 'get_resized_bboxes', 'plot_random_images']

# %% ../nbs/02_data_preprocessing.ipynb 6
import cv2
from pathlib import Path
from PIL import Image
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from miniai.datasets import show_images

# %% ../nbs/02_data_preprocessing.ipynb 14
def annotated_image(image, boxes):
    """
    image - image to be annotated
    boxes - list of bounding boxes to be annotated
    """
    imann = image.copy()
    for box in boxes:
        cv2.rectangle(imann, tuple(map(int, box[:2])), tuple(map(int, box[2:])), (0, 255, 0), 2)
    return imann

# %% ../nbs/02_data_preprocessing.ipynb 18
def get_breedname(path, normalize=False):
    """
    impath - path to image or annotation
    normalize - if set to true, lowercases the name
    returns the name of the dog breed
    """
    import os
    parts = path.split(os.sep)
    breed = parts[-2].split('-')[-1]
    return breed if not normalize else breed.lower()

# %% ../nbs/02_data_preprocessing.ipynb 25
def resize_bboxes(boxes, src_size, dst_size):
    """
    boxes - Bounding boxes in src image
    src_size - size of the src image
    dst_size - size of the dst image
    """
    boxes = np.array(boxes).astype(np.float64)
    fx = dst_size[1] / float(src_size[1])
    fy = dst_size[0] / float(src_size[0])
    boxes[:, [0, 2]] *= fx
    boxes[:, [1, 3]] *= fy
    return boxes

# %% ../nbs/02_data_preprocessing.ipynb 28
def save_resized(impath, dsize=(256, 256)):
    """
    impath - parent path to images
    dsize - destination image size
    Saves images under the parent folder of impaths under new folder `resized`
    """
    import glob
    import os
    images = glob.glob(f'{impath}/**/*.jpg') + glob.glob(f'{impaths}/**/*.jpeg')
    dstdir = (Path(impath).parent/'resized')
    dstdir.mkdir(parents=True, exist_ok=True)    
    for image in images:
        uniquename = os.sep.join(image.split(os.sep)[-2:])
        img = cv2.imread(image)
        imgr = cv2.resize(img, dsize)
        dst = f'{str(dstdir)}/{uniquename}'
        dst_image_parent = Path(dst).parent
        dst_image_parent.mkdir(exist_ok=True, parents=True)
        cv2.imwrite(dst, imgr)

# %% ../nbs/02_data_preprocessing.ipynb 31
def get_resized_bboxes(impath, annotations_path, dsize=(256, 256), format='stanford'):
    """
    Gets the bounding boxes of the image given a specified destination resize which
    assumes the image has been resized and is not the original size as provided
    in the annotations file.
    impath - path to the image on disk
    annotations_path - path to corresponding annotations folder
    dsize - Size of the resized image
    format - one of 'stanford' or 'tsinghua'
    """
    assert format in ['stanford', 'tsinghua'], 'Format neither "stanford" nor "tsinghua"'
    import os
    import xml.etree.ElementTree as ET
    parts = impath.split(os.sep)
    imname = Path(os.sep.join(parts[-2:]))
    uniquename = imname.parent/imname.stem
    annotation_file = f'{annotations_path}/{uniquename}'
    if format == 'tsinghua':
        annotation_file += '.jpg.xml'
    root = ET.parse(annotation_file)
    boxes = []
    bndbox_index = 4
    src_w = float(root.find('size')[0].text)
    src_h = float(root.find('size')[1].text)
    bndbox = 'bndbox' if format=='stanford' else 'bodybndbox'
    for obj in root.iter('object'):
        boxelem = obj.find(bndbox)
        left, top, right, bottom = boxelem[0].text, boxelem[1].text, boxelem[2].text, boxelem[3].text
        left, top, right, bottom = map(int, [left, top, right, bottom])
        boxes.append([left, top, right, bottom])
    return resize_bboxes(boxes, (src_h, src_w), dsize)

# %% ../nbs/02_data_preprocessing.ipynb 34
def plot_random_images(datadir, n=16):
    """
    datadir - Parent folder where both stanford and tsinghua datasets are
    """
    import glob
    files = glob.glob(f'{datadir}/**/resized/**/*.jpeg') + glob.glob(f'{datadir}/**/resized/**/*.jpg')
    files = np.random.choice(files, size=(n,), replace=False)
    bboxes = []
    format = 'stanford'
    annotations = f'{datadir}/stanford_dogs/Annotation'
    for filepath in files:
        if 'tsinghua' in filepath:
            format = 'tsinghua'
            annotations = f'{datadir}/tsinghua_dogs/Low-Annotations'
        else:
            format = 'stanford'
            annotations = f'{datadir}/stanford_dogs/Annotation'
        boxes = get_resized_bboxes(filepath, annotations, format=format)
        bboxes.append(boxes)
    images = [np.array(Image.open(filepath)) for filepath in files]
    titles = [get_breedname(filepath, normalize=True) for filepath in files]
    annotated_images = [annotated_image(im, bbox) for (im, bbox) in zip(images, bboxes)]
    show_images(annotated_images, titles=titles)
